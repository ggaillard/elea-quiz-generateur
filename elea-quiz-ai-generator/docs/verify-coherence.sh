#!/bin/bash

# Script de v√©rification de coh√©rence de la documentation
echo "üîç V√©rification de Coh√©rence - Documentation √âl√©a Quiz AI Generator"
echo "===================================================================="

# Fonction pour v√©rifier l'existence d'un fichier
check_file() {
    if [ -f "$1" ]; then
        echo "‚úÖ $1"
        return 0
    else
        echo "‚ùå $1 (manquant)"
        return 1
    fi
}

# Fonction pour v√©rifier l'existence d'un dossier
check_dir() {
    if [ -d "$1" ]; then
        echo "‚úÖ $1/"
        return 0
    else
        echo "‚ùå $1/ (manquant)"
        return 1
    fi
}

# 1. V√©rification des fichiers principaux
echo ""
echo "üìÑ Fichiers Principaux:"
echo "-----------------------"
check_file "README.md"
check_file "package.json"
check_file ".env.example"
check_file "mistral-config.json"

# 2. V√©rification de la structure docs/
echo ""
echo "üìö Structure Documentation:"
echo "---------------------------"
check_dir "docs"
check_file "docs/COMPLETE_DOCUMENTATION.md"
check_file "docs/MISTRAL_INTEGRATION.md"
check_dir "docs/diagrams"
check_dir "docs/screenshots"

# 3. V√©rification des diagrammes SVG
echo ""
echo "üìä Diagrammes SVG:"
echo "------------------"
check_file "docs/diagrams/architecture.svg"
check_file "docs/diagrams/workflow.svg"
check_file "docs/diagrams/providers-comparison.svg"
check_file "docs/diagrams/ui-mockup.svg"
check_file "docs/diagrams/mistral-config.svg"

# 4. V√©rification des screenshots
echo ""
echo "üì∏ Screenshots:"
echo "---------------"
screenshot_files=(
    "home-page.png"
    "file-upload.png"
    "ai-config.png"
    "quiz-generation.png"
    "question-review.png"
    "elea-integration.png"
)

for file in "${screenshot_files[@]}"; do
    check_file "docs/screenshots/$file"
done

# 5. V√©rification des scripts
echo ""
echo "‚öôÔ∏è Scripts:"
echo "-----------"
check_file "scripts/mistral-quiz-generator.cjs"
check_file "install-mistral.sh"
check_file "take-screenshots.sh"
check_file "create-placeholders.sh"

# 6. V√©rification des sources TypeScript
echo ""
echo "üíª Sources TypeScript:"
echo "---------------------"
check_dir "src"
check_file "src/types/index.ts"
check_file "src/services/aiService.ts"
check_file "src/utils/aiConfig.ts"
check_file "src/components/AIProviderSelector.tsx"

# 7. Analyse des r√©f√©rences dans README.md
echo ""
echo "üîó Analyse des R√©f√©rences README.md:"
echo "------------------------------------"
if [ -f "README.md" ]; then
    # V√©rifier les liens vers la documentation
    grep -n "\[.*\](.*docs.*)" README.md | while read line; do
        echo "üìã $line"
    done
    
    # V√©rifier les mentions de Mistral
    mistral_count=$(grep -c -i "mistral" README.md)
    echo "ü§ñ Mentions Mistral AI: $mistral_count"
    
    # V√©rifier les badges
    badge_count=$(grep -c "badge" README.md)
    echo "üèÜ Badges: $badge_count"
else
    echo "‚ùå README.md manquant"
fi

# 8. Analyse des r√©f√©rences dans COMPLETE_DOCUMENTATION.md
echo ""
echo "üìñ Analyse Documentation Compl√®te:"
echo "----------------------------------"
if [ -f "docs/COMPLETE_DOCUMENTATION.md" ]; then
    # V√©rifier les liens vers les SVG
    svg_links=$(grep -c "\.svg" docs/COMPLETE_DOCUMENTATION.md)
    echo "üé® Liens SVG: $svg_links"
    
    # V√©rifier les liens vers les screenshots
    screenshot_links=$(grep -c "screenshots/" docs/COMPLETE_DOCUMENTATION.md)
    echo "üì∏ Liens Screenshots: $screenshot_links"
    
    # V√©rifier la table des mati√®res
    toc_count=$(grep -c "^- \[" docs/COMPLETE_DOCUMENTATION.md)
    echo "üìë Table des mati√®res: $toc_count entr√©es"
else
    echo "‚ùå Documentation compl√®te manquante"
fi

# 9. V√©rification des exemples de code
echo ""
echo "üí° Exemples de Code:"
echo "-------------------"
if [ -f "docs/COMPLETE_DOCUMENTATION.md" ]; then
    # Compter les blocs de code
    code_blocks=$(grep -c '```' docs/COMPLETE_DOCUMENTATION.md)
    echo "üìù Blocs de code: $((code_blocks / 2))"
    
    # V√©rifier les exemples TypeScript
    ts_examples=$(grep -c '```typescript' docs/COMPLETE_DOCUMENTATION.md)
    echo "üî∑ Exemples TypeScript: $ts_examples"
    
    # V√©rifier les exemples bash
    bash_examples=$(grep -c '```bash' docs/COMPLETE_DOCUMENTATION.md)
    echo "‚ö° Exemples Bash: $bash_examples"
fi

# 10. Validation des configurations
echo ""
echo "‚öôÔ∏è Validation Configurations:"
echo "-----------------------------"

# V√©rifier package.json
if [ -f "package.json" ]; then
    if grep -q "mistral" package.json; then
        echo "‚úÖ Scripts Mistral pr√©sents dans package.json"
    else
        echo "‚ö†Ô∏è  Scripts Mistral manquants dans package.json"
    fi
    
    if grep -q "@mistralai/mistralai" package.json; then
        echo "‚úÖ D√©pendance Mistral AI pr√©sente"
    else
        echo "‚ùå D√©pendance Mistral AI manquante"
    fi
fi

# V√©rifier .env.example
if [ -f ".env.example" ]; then
    if grep -q "MISTRAL_API_KEY" .env.example; then
        echo "‚úÖ Variables Mistral dans .env.example"
    else
        echo "‚ùå Variables Mistral manquantes dans .env.example"
    fi
fi

# 11. Coh√©rence des versions et noms
echo ""
echo "üîÑ Coh√©rence Versions et Noms:"
echo "------------------------------"

# Extraire le nom du projet depuis package.json
if [ -f "package.json" ]; then
    project_name=$(grep '"name"' package.json | cut -d'"' -f4)
    echo "üì¶ Nom du projet: $project_name"
    
    # V√©rifier si le nom est coh√©rent dans README
    if grep -q "$project_name" README.md 2>/dev/null; then
        echo "‚úÖ Nom coh√©rent dans README.md"
    else
        echo "‚ö†Ô∏è  Nom incoh√©rent dans README.md"
    fi
fi

# 12. R√©sum√© des probl√®mes
echo ""
echo "üìä R√©sum√© de Coh√©rence:"
echo "-----------------------"

total_files=0
missing_files=0

# Compter les fichiers essentiels
essential_files=(
    "README.md"
    "docs/COMPLETE_DOCUMENTATION.md"
    "docs/diagrams/architecture.svg"
    "docs/diagrams/workflow.svg"
    "docs/diagrams/providers-comparison.svg"
    "src/services/aiService.ts"
    "scripts/mistral-quiz-generator.cjs"
)

for file in "${essential_files[@]}"; do
    total_files=$((total_files + 1))
    if [ ! -f "$file" ]; then
        missing_files=$((missing_files + 1))
    fi
done

present_files=$((total_files - missing_files))
coherence_score=$((present_files * 100 / total_files))

echo "üìà Score de coh√©rence: $coherence_score% ($present_files/$total_files fichiers)"

if [ $coherence_score -ge 90 ]; then
    echo "üéâ Excellente coh√©rence de documentation!"
elif [ $coherence_score -ge 75 ]; then
    echo "üëç Bonne coh√©rence, quelques am√©liorations possibles"
elif [ $coherence_score -ge 50 ]; then
    echo "‚ö†Ô∏è  Coh√©rence mod√©r√©e, r√©vision recommand√©e"
else
    echo "‚ùå Coh√©rence faible, r√©vision majeure n√©cessaire"
fi

echo ""
echo "‚ú® V√©rification termin√©e!"
