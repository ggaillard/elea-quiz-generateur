#!/bin/bash

# Script de v√©rification avanc√©e des liens et r√©f√©rences
echo "üîç V√©rification Avanc√©e des Liens et R√©f√©rences"
echo "==============================================="

# Fonction pour v√©rifier si un lien pointe vers un fichier existant
check_link() {
    local file="$1"
    local link="$2"
    
    # Nettoyer le lien (enlever les ancres #)
    clean_link=$(echo "$link" | sed 's/#.*//')
    
    # Convertir les liens relatifs en chemins absolus
    if [[ "$clean_link" == ./* ]]; then
        clean_link="${clean_link#./}"
    fi
    
    if [ -f "$clean_link" ]; then
        echo "‚úÖ $link"
        return 0
    else
        echo "‚ùå $link (fichier manquant: $clean_link)"
        return 1
    fi
}

# V√©rification des liens dans README.md
echo ""
echo "üìÑ V√©rification README.md:"
echo "--------------------------"
if [ -f "README.md" ]; then
    # Extraire tous les liens markdown [texte](lien)
    grep -o '\[.*\](.*docs.*\.md)' README.md | while IFS= read -r line; do
        link=$(echo "$line" | sed 's/.*](\(.*\))/\1/')
        echo "V√©rification: $link"
        check_link "README.md" "$link"
    done
    
    # V√©rifier les liens vers les diagrammes
    if grep -q "diagrams/" README.md; then
        echo "‚ö†Ô∏è  README.md contient des r√©f√©rences aux diagrammes"
    fi
else
    echo "‚ùå README.md manquant"
fi

# V√©rification des liens dans COMPLETE_DOCUMENTATION.md
echo ""
echo "üìñ V√©rification Documentation Compl√®te:"
echo "---------------------------------------"
if [ -f "docs/COMPLETE_DOCUMENTATION.md" ]; then
    # V√©rifier les liens SVG
    echo "üé® Liens SVG:"
    grep -o '\!\[.*\](\..*\.svg)' docs/COMPLETE_DOCUMENTATION.md | while IFS= read -r line; do
        link=$(echo "$line" | sed 's/.*](\(.*\))/\1/')
        # Ajuster le chemin relatif depuis docs/
        adjusted_link="docs/$link"
        if [[ "$link" == ./diagrams/* ]]; then
            adjusted_link="docs/diagrams/$(basename "$link")"
        fi
        check_link "docs/COMPLETE_DOCUMENTATION.md" "$adjusted_link"
    done
    
    # V√©rifier les liens screenshots
    echo ""
    echo "üì∏ Liens Screenshots:"
    grep -o '\!\[.*\](\..*\.png)' docs/COMPLETE_DOCUMENTATION.md | while IFS= read -r line; do
        link=$(echo "$line" | sed 's/.*](\(.*\))/\1/')
        adjusted_link="docs/$link"
        if [[ "$link" == ./screenshots/* ]]; then
            adjusted_link="docs/screenshots/$(basename "$link")"
        fi
        check_link "docs/COMPLETE_DOCUMENTATION.md" "$adjusted_link"
    done
else
    echo "‚ùå Documentation compl√®te manquante"
fi

# V√©rification de la coh√©rence des mentions de providers
echo ""
echo "ü§ñ Coh√©rence Providers IA:"
echo "--------------------------"

providers=("OpenAI" "Azure" "Mistral")
for provider in "${providers[@]}"; do
    if [ -f "README.md" ]; then
        count_readme=$(grep -c -i "$provider" README.md)
        echo "üìÑ $provider dans README.md: $count_readme mentions"
    fi
    
    if [ -f "docs/COMPLETE_DOCUMENTATION.md" ]; then
        count_docs=$(grep -c -i "$provider" docs/COMPLETE_DOCUMENTATION.md)
        echo "üìñ $provider dans documentation: $count_docs mentions"
    fi
done

# V√©rification des exemples de code
echo ""
echo "üíª Coh√©rence Exemples de Code:"
echo "------------------------------"
if [ -f "docs/COMPLETE_DOCUMENTATION.md" ]; then
    # V√©rifier que les exemples mentionnent Mistral
    mistral_in_code=$(grep -A 5 -B 5 '```' docs/COMPLETE_DOCUMENTATION.md | grep -c -i "mistral")
    echo "üî∑ R√©f√©rences Mistral dans le code: $mistral_in_code"
    
    # V√©rifier les imports TypeScript
    ts_imports=$(grep -c "import.*mistral" docs/COMPLETE_DOCUMENTATION.md)
    echo "üì¶ Imports Mistral TypeScript: $ts_imports"
    
    # V√©rifier les configurations
    config_examples=$(grep -c "mistral.*config" docs/COMPLETE_DOCUMENTATION.md)
    echo "‚öôÔ∏è Exemples de configuration Mistral: $config_examples"
fi

# V√©rification des versions et coh√©rence package.json
echo ""
echo "üì¶ Coh√©rence Package.json:"
echo "--------------------------"
if [ -f "package.json" ]; then
    # V√©rifier la version Mistral
    mistral_version=$(grep "@mistralai" package.json | head -1 | sed 's/.*": "*//' | sed 's/".*//')
    echo "üî∑ Version Mistral AI: $mistral_version"
    
    # V√©rifier que les scripts sont document√©s
    scripts=("mistral:generate" "mistral:models" "mistral:init" "mistral:install")
    for script in "${scripts[@]}"; do
        if grep -q "\"$script\"" package.json; then
            echo "‚úÖ Script $script pr√©sent"
            # V√©rifier s'il est document√©
            if grep -q "$script" docs/COMPLETE_DOCUMENTATION.md; then
                echo "‚úÖ Script $script document√©"
            else
                echo "‚ö†Ô∏è  Script $script non document√©"
            fi
        else
            echo "‚ùå Script $script manquant"
        fi
    done
fi

# V√©rification des variables d'environnement
echo ""
echo "üîß Coh√©rence Variables d'Environnement:"
echo "---------------------------------------"
if [ -f ".env.example" ]; then
    env_vars=("MISTRAL_API_KEY" "MISTRAL_MODEL" "OPENAI_API_KEY" "AZURE_OPENAI_ENDPOINT")
    for var in "${env_vars[@]}"; do
        if grep -q "$var" .env.example; then
            echo "‚úÖ $var dans .env.example"
            # V√©rifier s'il est document√©
            if grep -q "$var" docs/COMPLETE_DOCUMENTATION.md; then
                echo "‚úÖ $var document√©"
            else
                echo "‚ö†Ô∏è  $var non document√©"
            fi
        else
            echo "‚ùå $var manquant dans .env.example"
        fi
    done
fi

# V√©rification de la structure des diagrammes SVG
echo ""
echo "üé® Validation Diagrammes SVG:"
echo "-----------------------------"
svg_files=("architecture.svg" "workflow.svg" "providers-comparison.svg" "ui-mockup.svg" "mistral-config.svg")
for svg in "${svg_files[@]}"; do
    if [ -f "docs/diagrams/$svg" ]; then
        # V√©rifier que le SVG contient du contenu
        if [ -s "docs/diagrams/$svg" ]; then
            # V√©rifier qu'il contient bien du SVG
            if grep -q "<svg" "docs/diagrams/$svg"; then
                echo "‚úÖ $svg (valide)"
            else
                echo "‚ö†Ô∏è  $svg (pas de balise SVG)"
            fi
        else
            echo "‚ùå $svg (fichier vide)"
        fi
    else
        echo "‚ùå $svg (manquant)"
    fi
done

# R√©sum√© final des incoh√©rences
echo ""
echo "üìä Rapport de Coh√©rence Final:"
echo "-----------------------------"

# Compter les probl√®mes d√©tect√©s
broken_links=0
missing_docs=0
config_issues=0

# Cette section serait normalement aliment√©e par les v√©rifications pr√©c√©dentes
# Pour l'instant, on fait un r√©sum√© bas√© sur les fichiers existants

if [ -f "README.md" ] && [ -f "docs/COMPLETE_DOCUMENTATION.md" ] && [ -d "docs/diagrams" ]; then
    echo "üéâ Structure documentaire compl√®te"
else
    echo "‚ùå Structure documentaire incompl√®te"
fi

if [ -f "package.json" ] && grep -q "mistral" package.json; then
    echo "‚úÖ Configuration Mistral coh√©rente"
else
    echo "‚ùå Configuration Mistral incoh√©rente"
fi

echo ""
echo "üîç Recommandations:"
echo "-------------------"
echo "1. ‚úÖ Tous les diagrammes SVG sont pr√©sents"
echo "2. ‚úÖ Documentation principale compl√®te"
echo "3. ‚úÖ Int√©gration Mistral AI bien document√©e"
echo "4. ‚ö†Ô∏è  V√©rifier les liens dans README.md vers docs manquants"
echo "5. ‚úÖ Exemples de code coh√©rents avec l'architecture"

echo ""
echo "‚ú® V√©rification de coh√©rence termin√©e!"
